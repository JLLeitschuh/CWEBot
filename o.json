[
  {
    "pm": "npm",
    "pid": 8401773462,
    "vid": 8400152728,
    "title": "Cross Site Scripting (XSS) in parseHTML",
    "description": "> Scripts passed in event attributes are executed in parseHTML immediately, without any possibility for the user to intervene\n> \n> -- [github.com](https://github.com/jquery/jquery/pull/1505)",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/jquery/jquery/issues/1505"
    ],
    "published": "2016-09-18T05:48:22.003Z",
    "updated": "2017-02-25T20:42:31.698Z"
  },
  {
    "pm": "npm",
    "pid": 8401773462,
    "vid": 8397111713,
    "title": "Selector interpreted as HTML",
    "description": "> `jQuery( strInput )` cannot reliably differentiate selectors from HTML.\n> ...\n> Looking for \"<\" past the first character creates vulnerabilities and confusing behavior on complex input.\n> \n> -- [jquery.com](https://bugs.jquery.com/ticket/11290)",
    "references": [
      "http://bugs.jquery.com/ticket/11290",
      "https://cwe.mitre.org/data/definitions/79.html"
    ],
    "published": "0001-01-01T00:00:00",
    "updated": "2017-02-25T20:22:21.027Z"
  },
  {
    "pm": "npm",
    "pid": 8399798782,
    "vid": 8400152728,
    "title": "Cross Site Scripting (XSS) in parseHTML",
    "description": "> Scripts passed in event attributes are executed in parseHTML immediately, without any possibility for the user to intervene\n> \n> -- [github.com](https://github.com/jquery/jquery/pull/1505)",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/jquery/jquery/issues/1505"
    ],
    "published": "2016-09-18T05:48:22.003Z",
    "updated": "2017-02-25T20:42:31.698Z"
  },
  {
    "pm": "npm",
    "pid": 8399798782,
    "vid": 8397111713,
    "title": "Selector interpreted as HTML",
    "description": "> `jQuery( strInput )` cannot reliably differentiate selectors from HTML.\n> ...\n> Looking for \"<\" past the first character creates vulnerabilities and confusing behavior on complex input.\n> \n> -- [jquery.com](https://bugs.jquery.com/ticket/11290)",
    "references": [
      "http://bugs.jquery.com/ticket/11290",
      "https://cwe.mitre.org/data/definitions/79.html"
    ],
    "published": "0001-01-01T00:00:00",
    "updated": "2017-02-25T20:22:21.027Z"
  },
  {
    "pm": "npm",
    "pid": 7012149567,
    "vid": 8400152728,
    "title": "Cross Site Scripting (XSS) in parseHTML",
    "description": "> Scripts passed in event attributes are executed in parseHTML immediately, without any possibility for the user to intervene\n> \n> -- [github.com](https://github.com/jquery/jquery/pull/1505)",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/jquery/jquery/issues/1505"
    ],
    "published": "2016-09-18T05:48:22.003Z",
    "updated": "2017-02-25T20:42:31.698Z"
  },
  {
    "pm": "npm",
    "pid": 7012149567,
    "vid": 8397111713,
    "title": "Selector interpreted as HTML",
    "description": "> `jQuery( strInput )` cannot reliably differentiate selectors from HTML.\n> ...\n> Looking for \"<\" past the first character creates vulnerabilities and confusing behavior on complex input.\n> \n> -- [jquery.com](https://bugs.jquery.com/ticket/11290)",
    "references": [
      "http://bugs.jquery.com/ticket/11290",
      "https://cwe.mitre.org/data/definitions/79.html"
    ],
    "published": "0001-01-01T00:00:00",
    "updated": "2017-02-25T20:22:21.027Z"
  },
  {
    "pm": "npm",
    "pid": 7014002900,
    "vid": 8400152728,
    "title": "Cross Site Scripting (XSS) in parseHTML",
    "description": "> Scripts passed in event attributes are executed in parseHTML immediately, without any possibility for the user to intervene\n> \n> -- [github.com](https://github.com/jquery/jquery/pull/1505)",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/jquery/jquery/issues/1505"
    ],
    "published": "2016-09-18T05:48:22.003Z",
    "updated": "2017-02-25T20:42:31.698Z"
  },
  {
    "pm": "npm",
    "pid": 7014002900,
    "vid": 8397111713,
    "title": "Selector interpreted as HTML",
    "description": "> `jQuery( strInput )` cannot reliably differentiate selectors from HTML.\n> ...\n> Looking for \"<\" past the first character creates vulnerabilities and confusing behavior on complex input.\n> \n> -- [jquery.com](https://bugs.jquery.com/ticket/11290)",
    "references": [
      "http://bugs.jquery.com/ticket/11290",
      "https://cwe.mitre.org/data/definitions/79.html"
    ],
    "published": "0001-01-01T00:00:00",
    "updated": "2017-02-25T20:22:21.027Z"
  },
  {
    "pm": "npm",
    "pid": 7014002897,
    "vid": 8400152728,
    "title": "Cross Site Scripting (XSS) in parseHTML",
    "description": "> Scripts passed in event attributes are executed in parseHTML immediately, without any possibility for the user to intervene\n> \n> -- [github.com](https://github.com/jquery/jquery/pull/1505)",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/jquery/jquery/issues/1505"
    ],
    "published": "2016-09-18T05:48:22.003Z",
    "updated": "2017-02-25T20:42:31.698Z"
  },
  {
    "pm": "npm",
    "pid": 7014002897,
    "vid": 8397111713,
    "title": "Selector interpreted as HTML",
    "description": "> `jQuery( strInput )` cannot reliably differentiate selectors from HTML.\n> ...\n> Looking for \"<\" past the first character creates vulnerabilities and confusing behavior on complex input.\n> \n> -- [jquery.com](https://bugs.jquery.com/ticket/11290)",
    "references": [
      "http://bugs.jquery.com/ticket/11290",
      "https://cwe.mitre.org/data/definitions/79.html"
    ],
    "published": "0001-01-01T00:00:00",
    "updated": "2017-02-25T20:22:21.027Z"
  },
  {
    "pm": "npm",
    "pid": 7014004264,
    "vid": 8400152728,
    "title": "Cross Site Scripting (XSS) in parseHTML",
    "description": "> Scripts passed in event attributes are executed in parseHTML immediately, without any possibility for the user to intervene\n> \n> -- [github.com](https://github.com/jquery/jquery/pull/1505)",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/jquery/jquery/issues/1505"
    ],
    "published": "2016-09-18T05:48:22.003Z",
    "updated": "2017-02-25T20:42:31.698Z"
  },
  {
    "pm": "npm",
    "pid": 7014004264,
    "vid": 8397111713,
    "title": "Selector interpreted as HTML",
    "description": "> `jQuery( strInput )` cannot reliably differentiate selectors from HTML.\n> ...\n> Looking for \"<\" past the first character creates vulnerabilities and confusing behavior on complex input.\n> \n> -- [jquery.com](https://bugs.jquery.com/ticket/11290)",
    "references": [
      "http://bugs.jquery.com/ticket/11290",
      "https://cwe.mitre.org/data/definitions/79.html"
    ],
    "published": "0001-01-01T00:00:00",
    "updated": "2017-02-25T20:22:21.027Z"
  },
  {
    "pm": "npm",
    "pid": 7013986598,
    "vid": 8400152728,
    "title": "Cross Site Scripting (XSS) in parseHTML",
    "description": "> Scripts passed in event attributes are executed in parseHTML immediately, without any possibility for the user to intervene\n> \n> -- [github.com](https://github.com/jquery/jquery/pull/1505)",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/jquery/jquery/issues/1505"
    ],
    "published": "2016-09-18T05:48:22.003Z",
    "updated": "2017-02-25T20:42:31.698Z"
  },
  {
    "pm": "npm",
    "pid": 7013986598,
    "vid": 8397111713,
    "title": "Selector interpreted as HTML",
    "description": "> `jQuery( strInput )` cannot reliably differentiate selectors from HTML.\n> ...\n> Looking for \"<\" past the first character creates vulnerabilities and confusing behavior on complex input.\n> \n> -- [jquery.com](https://bugs.jquery.com/ticket/11290)",
    "references": [
      "http://bugs.jquery.com/ticket/11290",
      "https://cwe.mitre.org/data/definitions/79.html"
    ],
    "published": "0001-01-01T00:00:00",
    "updated": "2017-02-25T20:22:21.027Z"
  },
  {
    "pm": "npm",
    "pid": 8399604613,
    "vid": 8400152728,
    "title": "Cross Site Scripting (XSS) in parseHTML",
    "description": "> Scripts passed in event attributes are executed in parseHTML immediately, without any possibility for the user to intervene\n> \n> -- [github.com](https://github.com/jquery/jquery/pull/1505)",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/jquery/jquery/issues/1505"
    ],
    "published": "2016-09-18T05:48:22.003Z",
    "updated": "2017-02-25T20:42:31.698Z"
  },
  {
    "pm": "npm",
    "pid": 8399604613,
    "vid": 8397111713,
    "title": "Selector interpreted as HTML",
    "description": "> `jQuery( strInput )` cannot reliably differentiate selectors from HTML.\n> ...\n> Looking for \"<\" past the first character creates vulnerabilities and confusing behavior on complex input.\n> \n> -- [jquery.com](https://bugs.jquery.com/ticket/11290)",
    "references": [
      "http://bugs.jquery.com/ticket/11290",
      "https://cwe.mitre.org/data/definitions/79.html"
    ],
    "published": "0001-01-01T00:00:00",
    "updated": "2017-02-25T20:22:21.027Z"
  },
  {
    "pm": "npm",
    "pid": 7276617640,
    "vid": 8400152728,
    "title": "Cross Site Scripting (XSS) in parseHTML",
    "description": "> Scripts passed in event attributes are executed in parseHTML immediately, without any possibility for the user to intervene\n> \n> -- [github.com](https://github.com/jquery/jquery/pull/1505)",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/jquery/jquery/issues/1505"
    ],
    "published": "2016-09-18T05:48:22.003Z",
    "updated": "2017-02-25T20:42:31.698Z"
  },
  {
    "pm": "npm",
    "pid": 7276617640,
    "vid": 8397111713,
    "title": "Selector interpreted as HTML",
    "description": "> `jQuery( strInput )` cannot reliably differentiate selectors from HTML.\n> ...\n> Looking for \"<\" past the first character creates vulnerabilities and confusing behavior on complex input.\n> \n> -- [jquery.com](https://bugs.jquery.com/ticket/11290)",
    "references": [
      "http://bugs.jquery.com/ticket/11290",
      "https://cwe.mitre.org/data/definitions/79.html"
    ],
    "published": "0001-01-01T00:00:00",
    "updated": "2017-02-25T20:22:21.027Z"
  },
  {
    "pm": "npm",
    "pid": 7014005271,
    "vid": 8400152728,
    "title": "Cross Site Scripting (XSS) in parseHTML",
    "description": "> Scripts passed in event attributes are executed in parseHTML immediately, without any possibility for the user to intervene\n> \n> -- [github.com](https://github.com/jquery/jquery/pull/1505)",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/jquery/jquery/issues/1505"
    ],
    "published": "2016-09-18T05:48:22.003Z",
    "updated": "2017-02-25T20:42:31.698Z"
  },
  {
    "pm": "npm",
    "pid": 7014005271,
    "vid": 8397111713,
    "title": "Selector interpreted as HTML",
    "description": "> `jQuery( strInput )` cannot reliably differentiate selectors from HTML.\n> ...\n> Looking for \"<\" past the first character creates vulnerabilities and confusing behavior on complex input.\n> \n> -- [jquery.com](https://bugs.jquery.com/ticket/11290)",
    "references": [
      "http://bugs.jquery.com/ticket/11290",
      "https://cwe.mitre.org/data/definitions/79.html"
    ],
    "published": "0001-01-01T00:00:00",
    "updated": "2017-02-25T20:22:21.027Z"
  },
  {
    "pm": "npm",
    "pid": 7014005268,
    "vid": 8400152728,
    "title": "Cross Site Scripting (XSS) in parseHTML",
    "description": "> Scripts passed in event attributes are executed in parseHTML immediately, without any possibility for the user to intervene\n> \n> -- [github.com](https://github.com/jquery/jquery/pull/1505)",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/jquery/jquery/issues/1505"
    ],
    "published": "2016-09-18T05:48:22.003Z",
    "updated": "2017-02-25T20:42:31.698Z"
  },
  {
    "pm": "npm",
    "pid": 7014005268,
    "vid": 8397111713,
    "title": "Selector interpreted as HTML",
    "description": "> `jQuery( strInput )` cannot reliably differentiate selectors from HTML.\n> ...\n> Looking for \"<\" past the first character creates vulnerabilities and confusing behavior on complex input.\n> \n> -- [jquery.com](https://bugs.jquery.com/ticket/11290)",
    "references": [
      "http://bugs.jquery.com/ticket/11290",
      "https://cwe.mitre.org/data/definitions/79.html"
    ],
    "published": "0001-01-01T00:00:00",
    "updated": "2017-02-25T20:22:21.027Z"
  },
  {
    "pm": "npm",
    "pid": 8401635517,
    "vid": 8402207876,
    "title": "Possible Cross Site Scripting (XSS)",
    "description": "There was a potential XSS exploit when using unquoted attributes, in particular the `=` character.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/emberjs/ember.js/issues/14297",
      "https://github.com/wycats/handlebars.js/commit/83b8e846a3569bd366cf0b6bdc1e4604d1a2077e",
      "https://github.com/wycats/handlebars.js/pull/1083"
    ],
    "published": "2016-11-30T02:28:53.917Z",
    "updated": "2017-02-22T04:23:39.277Z"
  },
  {
    "pm": "npm",
    "pid": 8401635517,
    "vid": 8401420912,
    "title": "Cross Site Scripting (XSS)",
    "description": "Model attributes are not properly escaped due to a bug in RenderBuffer. This opens the door for some potentially serious XSS attacks.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/emberjs/ember.js/issues/699"
    ],
    "published": "2016-11-13T07:56:34.225Z",
    "updated": "2017-02-22T04:16:47.951Z"
  },
  {
    "pm": "npm",
    "pid": 8401635517,
    "vid": 8399968153,
    "title": "XSS Vulnerability in Ember.js with User-Supplied JSON",
    "description": "It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain (\"XSS\").",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY"
    ],
    "published": "2016-08-11T15:25:29.067Z",
    "updated": "2017-02-22T04:16:47.95Z"
  },
  {
    "pm": "npm",
    "pid": 8401635517,
    "vid": 8399968151,
    "title": "XSS Vulnerability in Ember.js with User-Supplied JSON",
    "description": "It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain (\"XSS\").",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY"
    ],
    "published": "2016-08-11T15:24:20.923Z",
    "updated": "2017-02-22T04:16:47.948Z"
  },
  {
    "pm": "npm",
    "pid": 8401635517,
    "vid": 8399968152,
    "title": "XSS Vulnerability in Ember.js with User-Supplied JSON",
    "description": "It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain (\"XSS\").",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY"
    ],
    "published": "2016-08-11T15:24:58.365Z",
    "updated": "2017-02-22T04:16:47.948Z"
  },
  {
    "pm": "npm",
    "pid": 8401635517,
    "vid": 8399968150,
    "title": "XSS Vulnerability in Ember.js with User-Supplied JSON",
    "description": "It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain (\"XSS\").",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY"
    ],
    "published": "2016-08-11T15:23:38.489Z",
    "updated": "2017-02-22T04:16:47.947Z"
  },
  {
    "pm": "npm",
    "pid": 8401635517,
    "vid": 8399968149,
    "title": "XSS Vulnerability in Ember.js with User-Supplied JSON",
    "description": "It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain (\"XSS\").",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY"
    ],
    "published": "2016-08-11T15:22:39.576Z",
    "updated": "2017-02-22T04:16:47.945Z"
  },
  {
    "pm": "npm",
    "pid": 8401635517,
    "vid": 8399958615,
    "title": "XSS Vulnerability in Ember.js with User-Supplied JSON",
    "description": "It is possible for an attacker to create a specially-crafted payload\nthat causes a non-sanitized string to be treated as a `SafeString`, and\nthus bypass Ember's normal escaping behavior. This could allow an\nattacker to execute arbitrary JavaScript in the context of the current\ndomain (\"XSS\").",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY"
    ],
    "published": "2016-08-03T16:21:47.998Z",
    "updated": "2017-02-22T04:16:47.944Z"
  },
  {
    "pm": "npm",
    "pid": 8401635517,
    "vid": 8397111749,
    "title": "Potential XSS Exploit With User-Supplied Data When Binding Primitive Values",
    "description": "Potential XSS Exploit With User-Supplied Data When Binding Primitive Values\n\nThis vulnerability has been assigned the CVE identifier CVE-2014-0013.\n\nIn general, Ember.js escapes or strips any user-supplied content before\ninserting it in strings that will be sent to innerHTML.  However, we have\nidentified a vulnerability that could lead to unescaped content being inserted\ninto the innerHTML string without being sanitized.\n\nWhen a primitive value is used as the Handlebars context, that value is not\nproperly escaped.  An example of this would be using the `{{each}}` helper to\niterate over an array of user-supplied strings and using `{{this}}` inside the\nblock to display each string.\n\nIn applications that contain templates whose context is a primitive value and\nuse the `{{this}}` keyword to display that value, a specially-crafted payload\ncould execute arbitrary JavaScript in the context of the current domain\n(\"XSS\").\n\nVersions Affected: ALL versions\nNot affected: NONE\nFixed Versions: 1.0.1, 1.1.3, 1.2.1, 1.3.1, 1.4.0-beta.2",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/2kpXXCxISS4"
    ],
    "published": "0001-01-01T00:00:00",
    "updated": "2017-02-22T04:16:47.943Z"
  },
  {
    "pm": "npm",
    "pid": 8401635517,
    "vid": 8397111748,
    "title": "Potential XSS Exploit When Binding `tagName` to User-Supplied Data",
    "description": "Potential XSS Exploit When Binding `tagName` to User-Supplied Data\n\nThis vulnerability has been assigned the CVE identifier CVE-2013-4170.\n\nIn general, Ember.js escapes or strips any user-supplied content\nbefore inserting it in strings that will be sent to innerHTML.\nHowever, the `tagName` property of an `Ember.View` was inserted into\nsuch a string without being sanitized. This means that if an\napplication assigns a view's `tagName` to user-supplied data, a\nspecially-crafted payload could execute arbitrary JavaScript in the\ncontext of the current domain (\"XSS\").\n\nVersions Affected: ALL versions\nNot affected: NONE\nFixed Versions: 1.0.0 RC6.1, 1.0.0 RC5.1, 1.0.0 RC4.1, 1.0.0 RC3.1,\n1.0.0 RC2.1, 1.0.0 RC1.1\n",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM"
    ],
    "published": "0001-01-01T00:00:00",
    "updated": "2017-02-22T04:16:47.942Z"
  },
  {
    "pm": "npm",
    "pid": 8401635517,
    "vid": 359716,
    "title": "[CVE-2014-0046]  Improper Neutralization of Input During Web Page Generation (\"Cross-site Scripting\")",
    "description": "Cross-site scripting (XSS) vulnerability in the link-to helper in Ember.js 1.2.x before 1.2.2, 1.3.x before 1.3.2, and 1.4.x before 1.4.0-beta.6, when used in non-block form, allows remote attackers to inject arbitrary web script or HTML via the title attribute.",
    "references": [
      "http://cve.mitre.org/cgi-bin/cvename.cgi?name=2014-0046",
      "http://emberjs.com/blog/2014/02/07/ember-security-releases.html",
      "http://secunia.com/advisories/56965",
      "http://www.cvedetails.com/cve-details.php?t=1&cve_id=CVE-2014-0046",
      "http://www.openwall.com/lists/oss-security/2014/02/14/6",
      "http://www.securityfocus.com/bid/65579",
      "http://xforce.iss.net/xforce/xfdb/91242",
      "https://groups.google.com/forum/#!topic/ember-security/1h6FRgr8lXQ",
      "https://groups.google.com/forum/#%21topic/ember-security/1h6FRgr8lXQ"
    ],
    "published": "2014-02-27T15:55:04.907Z",
    "updated": "2017-02-22T04:16:47.941Z"
  },
  {
    "pm": "npm",
    "pid": 7013534322,
    "vid": 8402207876,
    "title": "Possible Cross Site Scripting (XSS)",
    "description": "There was a potential XSS exploit when using unquoted attributes, in particular the `=` character.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/emberjs/ember.js/issues/14297",
      "https://github.com/wycats/handlebars.js/commit/83b8e846a3569bd366cf0b6bdc1e4604d1a2077e",
      "https://github.com/wycats/handlebars.js/pull/1083"
    ],
    "published": "2016-11-30T02:28:53.917Z",
    "updated": "2017-02-22T04:23:39.277Z"
  },
  {
    "pm": "npm",
    "pid": 7013534322,
    "vid": 8401420912,
    "title": "Cross Site Scripting (XSS)",
    "description": "Model attributes are not properly escaped due to a bug in RenderBuffer. This opens the door for some potentially serious XSS attacks.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/emberjs/ember.js/issues/699"
    ],
    "published": "2016-11-13T07:56:34.225Z",
    "updated": "2017-02-22T04:16:47.951Z"
  },
  {
    "pm": "npm",
    "pid": 7013534322,
    "vid": 8399968153,
    "title": "XSS Vulnerability in Ember.js with User-Supplied JSON",
    "description": "It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain (\"XSS\").",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY"
    ],
    "published": "2016-08-11T15:25:29.067Z",
    "updated": "2017-02-22T04:16:47.95Z"
  },
  {
    "pm": "npm",
    "pid": 7013534322,
    "vid": 8399968151,
    "title": "XSS Vulnerability in Ember.js with User-Supplied JSON",
    "description": "It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain (\"XSS\").",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY"
    ],
    "published": "2016-08-11T15:24:20.923Z",
    "updated": "2017-02-22T04:16:47.948Z"
  },
  {
    "pm": "npm",
    "pid": 7013534322,
    "vid": 8399968152,
    "title": "XSS Vulnerability in Ember.js with User-Supplied JSON",
    "description": "It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain (\"XSS\").",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY"
    ],
    "published": "2016-08-11T15:24:58.365Z",
    "updated": "2017-02-22T04:16:47.948Z"
  },
  {
    "pm": "npm",
    "pid": 7013534322,
    "vid": 8399968150,
    "title": "XSS Vulnerability in Ember.js with User-Supplied JSON",
    "description": "It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain (\"XSS\").",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY"
    ],
    "published": "2016-08-11T15:23:38.489Z",
    "updated": "2017-02-22T04:16:47.947Z"
  },
  {
    "pm": "npm",
    "pid": 7013534322,
    "vid": 8399968149,
    "title": "XSS Vulnerability in Ember.js with User-Supplied JSON",
    "description": "It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain (\"XSS\").",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY"
    ],
    "published": "2016-08-11T15:22:39.576Z",
    "updated": "2017-02-22T04:16:47.945Z"
  },
  {
    "pm": "npm",
    "pid": 7013534322,
    "vid": 8399958615,
    "title": "XSS Vulnerability in Ember.js with User-Supplied JSON",
    "description": "It is possible for an attacker to create a specially-crafted payload\nthat causes a non-sanitized string to be treated as a `SafeString`, and\nthus bypass Ember's normal escaping behavior. This could allow an\nattacker to execute arbitrary JavaScript in the context of the current\ndomain (\"XSS\").",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY"
    ],
    "published": "2016-08-03T16:21:47.998Z",
    "updated": "2017-02-22T04:16:47.944Z"
  },
  {
    "pm": "npm",
    "pid": 7013534322,
    "vid": 8397111749,
    "title": "Potential XSS Exploit With User-Supplied Data When Binding Primitive Values",
    "description": "Potential XSS Exploit With User-Supplied Data When Binding Primitive Values\n\nThis vulnerability has been assigned the CVE identifier CVE-2014-0013.\n\nIn general, Ember.js escapes or strips any user-supplied content before\ninserting it in strings that will be sent to innerHTML.  However, we have\nidentified a vulnerability that could lead to unescaped content being inserted\ninto the innerHTML string without being sanitized.\n\nWhen a primitive value is used as the Handlebars context, that value is not\nproperly escaped.  An example of this would be using the `{{each}}` helper to\niterate over an array of user-supplied strings and using `{{this}}` inside the\nblock to display each string.\n\nIn applications that contain templates whose context is a primitive value and\nuse the `{{this}}` keyword to display that value, a specially-crafted payload\ncould execute arbitrary JavaScript in the context of the current domain\n(\"XSS\").\n\nVersions Affected: ALL versions\nNot affected: NONE\nFixed Versions: 1.0.1, 1.1.3, 1.2.1, 1.3.1, 1.4.0-beta.2",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/2kpXXCxISS4"
    ],
    "published": "0001-01-01T00:00:00",
    "updated": "2017-02-22T04:16:47.943Z"
  },
  {
    "pm": "npm",
    "pid": 7013534322,
    "vid": 8397111748,
    "title": "Potential XSS Exploit When Binding `tagName` to User-Supplied Data",
    "description": "Potential XSS Exploit When Binding `tagName` to User-Supplied Data\n\nThis vulnerability has been assigned the CVE identifier CVE-2013-4170.\n\nIn general, Ember.js escapes or strips any user-supplied content\nbefore inserting it in strings that will be sent to innerHTML.\nHowever, the `tagName` property of an `Ember.View` was inserted into\nsuch a string without being sanitized. This means that if an\napplication assigns a view's `tagName` to user-supplied data, a\nspecially-crafted payload could execute arbitrary JavaScript in the\ncontext of the current domain (\"XSS\").\n\nVersions Affected: ALL versions\nNot affected: NONE\nFixed Versions: 1.0.0 RC6.1, 1.0.0 RC5.1, 1.0.0 RC4.1, 1.0.0 RC3.1,\n1.0.0 RC2.1, 1.0.0 RC1.1\n",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM"
    ],
    "published": "0001-01-01T00:00:00",
    "updated": "2017-02-22T04:16:47.942Z"
  },
  {
    "pm": "npm",
    "pid": 7013534322,
    "vid": 359716,
    "title": "[CVE-2014-0046]  Improper Neutralization of Input During Web Page Generation (\"Cross-site Scripting\")",
    "description": "Cross-site scripting (XSS) vulnerability in the link-to helper in Ember.js 1.2.x before 1.2.2, 1.3.x before 1.3.2, and 1.4.x before 1.4.0-beta.6, when used in non-block form, allows remote attackers to inject arbitrary web script or HTML via the title attribute.",
    "references": [
      "http://cve.mitre.org/cgi-bin/cvename.cgi?name=2014-0046",
      "http://emberjs.com/blog/2014/02/07/ember-security-releases.html",
      "http://secunia.com/advisories/56965",
      "http://www.cvedetails.com/cve-details.php?t=1&cve_id=CVE-2014-0046",
      "http://www.openwall.com/lists/oss-security/2014/02/14/6",
      "http://www.securityfocus.com/bid/65579",
      "http://xforce.iss.net/xforce/xfdb/91242",
      "https://groups.google.com/forum/#!topic/ember-security/1h6FRgr8lXQ",
      "https://groups.google.com/forum/#%21topic/ember-security/1h6FRgr8lXQ"
    ],
    "published": "2014-02-27T15:55:04.907Z",
    "updated": "2017-02-22T04:16:47.941Z"
  },
  {
    "pm": "npm",
    "pid": 7013532979,
    "vid": 8402207876,
    "title": "Possible Cross Site Scripting (XSS)",
    "description": "There was a potential XSS exploit when using unquoted attributes, in particular the `=` character.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/emberjs/ember.js/issues/14297",
      "https://github.com/wycats/handlebars.js/commit/83b8e846a3569bd366cf0b6bdc1e4604d1a2077e",
      "https://github.com/wycats/handlebars.js/pull/1083"
    ],
    "published": "2016-11-30T02:28:53.917Z",
    "updated": "2017-02-22T04:23:39.277Z"
  },
  {
    "pm": "npm",
    "pid": 7013532979,
    "vid": 8401420912,
    "title": "Cross Site Scripting (XSS)",
    "description": "Model attributes are not properly escaped due to a bug in RenderBuffer. This opens the door for some potentially serious XSS attacks.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/emberjs/ember.js/issues/699"
    ],
    "published": "2016-11-13T07:56:34.225Z",
    "updated": "2017-02-22T04:16:47.951Z"
  },
  {
    "pm": "npm",
    "pid": 7013532979,
    "vid": 8399968153,
    "title": "XSS Vulnerability in Ember.js with User-Supplied JSON",
    "description": "It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain (\"XSS\").",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY"
    ],
    "published": "2016-08-11T15:25:29.067Z",
    "updated": "2017-02-22T04:16:47.95Z"
  },
  {
    "pm": "npm",
    "pid": 7013532979,
    "vid": 8399968151,
    "title": "XSS Vulnerability in Ember.js with User-Supplied JSON",
    "description": "It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain (\"XSS\").",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY"
    ],
    "published": "2016-08-11T15:24:20.923Z",
    "updated": "2017-02-22T04:16:47.948Z"
  },
  {
    "pm": "npm",
    "pid": 7013532979,
    "vid": 8399968152,
    "title": "XSS Vulnerability in Ember.js with User-Supplied JSON",
    "description": "It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain (\"XSS\").",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY"
    ],
    "published": "2016-08-11T15:24:58.365Z",
    "updated": "2017-02-22T04:16:47.948Z"
  },
  {
    "pm": "npm",
    "pid": 7013532979,
    "vid": 8399968150,
    "title": "XSS Vulnerability in Ember.js with User-Supplied JSON",
    "description": "It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain (\"XSS\").",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY"
    ],
    "published": "2016-08-11T15:23:38.489Z",
    "updated": "2017-02-22T04:16:47.947Z"
  },
  {
    "pm": "npm",
    "pid": 7013532979,
    "vid": 8399968149,
    "title": "XSS Vulnerability in Ember.js with User-Supplied JSON",
    "description": "It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain (\"XSS\").",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY"
    ],
    "published": "2016-08-11T15:22:39.576Z",
    "updated": "2017-02-22T04:16:47.945Z"
  },
  {
    "pm": "npm",
    "pid": 7013532979,
    "vid": 8399958615,
    "title": "XSS Vulnerability in Ember.js with User-Supplied JSON",
    "description": "It is possible for an attacker to create a specially-crafted payload\nthat causes a non-sanitized string to be treated as a `SafeString`, and\nthus bypass Ember's normal escaping behavior. This could allow an\nattacker to execute arbitrary JavaScript in the context of the current\ndomain (\"XSS\").",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY"
    ],
    "published": "2016-08-03T16:21:47.998Z",
    "updated": "2017-02-22T04:16:47.944Z"
  },
  {
    "pm": "npm",
    "pid": 7013532979,
    "vid": 8397111749,
    "title": "Potential XSS Exploit With User-Supplied Data When Binding Primitive Values",
    "description": "Potential XSS Exploit With User-Supplied Data When Binding Primitive Values\n\nThis vulnerability has been assigned the CVE identifier CVE-2014-0013.\n\nIn general, Ember.js escapes or strips any user-supplied content before\ninserting it in strings that will be sent to innerHTML.  However, we have\nidentified a vulnerability that could lead to unescaped content being inserted\ninto the innerHTML string without being sanitized.\n\nWhen a primitive value is used as the Handlebars context, that value is not\nproperly escaped.  An example of this would be using the `{{each}}` helper to\niterate over an array of user-supplied strings and using `{{this}}` inside the\nblock to display each string.\n\nIn applications that contain templates whose context is a primitive value and\nuse the `{{this}}` keyword to display that value, a specially-crafted payload\ncould execute arbitrary JavaScript in the context of the current domain\n(\"XSS\").\n\nVersions Affected: ALL versions\nNot affected: NONE\nFixed Versions: 1.0.1, 1.1.3, 1.2.1, 1.3.1, 1.4.0-beta.2",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/2kpXXCxISS4"
    ],
    "published": "0001-01-01T00:00:00",
    "updated": "2017-02-22T04:16:47.943Z"
  },
  {
    "pm": "npm",
    "pid": 7013532979,
    "vid": 8397111748,
    "title": "Potential XSS Exploit When Binding `tagName` to User-Supplied Data",
    "description": "Potential XSS Exploit When Binding `tagName` to User-Supplied Data\n\nThis vulnerability has been assigned the CVE identifier CVE-2013-4170.\n\nIn general, Ember.js escapes or strips any user-supplied content\nbefore inserting it in strings that will be sent to innerHTML.\nHowever, the `tagName` property of an `Ember.View` was inserted into\nsuch a string without being sanitized. This means that if an\napplication assigns a view's `tagName` to user-supplied data, a\nspecially-crafted payload could execute arbitrary JavaScript in the\ncontext of the current domain (\"XSS\").\n\nVersions Affected: ALL versions\nNot affected: NONE\nFixed Versions: 1.0.0 RC6.1, 1.0.0 RC5.1, 1.0.0 RC4.1, 1.0.0 RC3.1,\n1.0.0 RC2.1, 1.0.0 RC1.1\n",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM"
    ],
    "published": "0001-01-01T00:00:00",
    "updated": "2017-02-22T04:16:47.942Z"
  },
  {
    "pm": "npm",
    "pid": 7013532979,
    "vid": 359716,
    "title": "[CVE-2014-0046]  Improper Neutralization of Input During Web Page Generation (\"Cross-site Scripting\")",
    "description": "Cross-site scripting (XSS) vulnerability in the link-to helper in Ember.js 1.2.x before 1.2.2, 1.3.x before 1.3.2, and 1.4.x before 1.4.0-beta.6, when used in non-block form, allows remote attackers to inject arbitrary web script or HTML via the title attribute.",
    "references": [
      "http://cve.mitre.org/cgi-bin/cvename.cgi?name=2014-0046",
      "http://emberjs.com/blog/2014/02/07/ember-security-releases.html",
      "http://secunia.com/advisories/56965",
      "http://www.cvedetails.com/cve-details.php?t=1&cve_id=CVE-2014-0046",
      "http://www.openwall.com/lists/oss-security/2014/02/14/6",
      "http://www.securityfocus.com/bid/65579",
      "http://xforce.iss.net/xforce/xfdb/91242",
      "https://groups.google.com/forum/#!topic/ember-security/1h6FRgr8lXQ",
      "https://groups.google.com/forum/#%21topic/ember-security/1h6FRgr8lXQ"
    ],
    "published": "2014-02-27T15:55:04.907Z",
    "updated": "2017-02-22T04:16:47.941Z"
  },
  {
    "pm": "npm",
    "pid": 8401629900,
    "vid": 8402207876,
    "title": "Possible Cross Site Scripting (XSS)",
    "description": "There was a potential XSS exploit when using unquoted attributes, in particular the `=` character.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/emberjs/ember.js/issues/14297",
      "https://github.com/wycats/handlebars.js/commit/83b8e846a3569bd366cf0b6bdc1e4604d1a2077e",
      "https://github.com/wycats/handlebars.js/pull/1083"
    ],
    "published": "2016-11-30T02:28:53.917Z",
    "updated": "2017-02-22T04:23:39.277Z"
  },
  {
    "pm": "npm",
    "pid": 8401629900,
    "vid": 8401420912,
    "title": "Cross Site Scripting (XSS)",
    "description": "Model attributes are not properly escaped due to a bug in RenderBuffer. This opens the door for some potentially serious XSS attacks.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/emberjs/ember.js/issues/699"
    ],
    "published": "2016-11-13T07:56:34.225Z",
    "updated": "2017-02-22T04:16:47.951Z"
  },
  {
    "pm": "npm",
    "pid": 8401629900,
    "vid": 8399968153,
    "title": "XSS Vulnerability in Ember.js with User-Supplied JSON",
    "description": "It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain (\"XSS\").",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY"
    ],
    "published": "2016-08-11T15:25:29.067Z",
    "updated": "2017-02-22T04:16:47.95Z"
  },
  {
    "pm": "npm",
    "pid": 8401629900,
    "vid": 8399968151,
    "title": "XSS Vulnerability in Ember.js with User-Supplied JSON",
    "description": "It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain (\"XSS\").",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY"
    ],
    "published": "2016-08-11T15:24:20.923Z",
    "updated": "2017-02-22T04:16:47.948Z"
  },
  {
    "pm": "npm",
    "pid": 8401629900,
    "vid": 8399968152,
    "title": "XSS Vulnerability in Ember.js with User-Supplied JSON",
    "description": "It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain (\"XSS\").",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY"
    ],
    "published": "2016-08-11T15:24:58.365Z",
    "updated": "2017-02-22T04:16:47.948Z"
  },
  {
    "pm": "npm",
    "pid": 8401629900,
    "vid": 8399968150,
    "title": "XSS Vulnerability in Ember.js with User-Supplied JSON",
    "description": "It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain (\"XSS\").",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY"
    ],
    "published": "2016-08-11T15:23:38.489Z",
    "updated": "2017-02-22T04:16:47.947Z"
  },
  {
    "pm": "npm",
    "pid": 8401629900,
    "vid": 8399968149,
    "title": "XSS Vulnerability in Ember.js with User-Supplied JSON",
    "description": "It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain (\"XSS\").",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY"
    ],
    "published": "2016-08-11T15:22:39.576Z",
    "updated": "2017-02-22T04:16:47.945Z"
  },
  {
    "pm": "npm",
    "pid": 8401629900,
    "vid": 8399958615,
    "title": "XSS Vulnerability in Ember.js with User-Supplied JSON",
    "description": "It is possible for an attacker to create a specially-crafted payload\nthat causes a non-sanitized string to be treated as a `SafeString`, and\nthus bypass Ember's normal escaping behavior. This could allow an\nattacker to execute arbitrary JavaScript in the context of the current\ndomain (\"XSS\").",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY"
    ],
    "published": "2016-08-03T16:21:47.998Z",
    "updated": "2017-02-22T04:16:47.944Z"
  },
  {
    "pm": "npm",
    "pid": 8401629900,
    "vid": 8397111749,
    "title": "Potential XSS Exploit With User-Supplied Data When Binding Primitive Values",
    "description": "Potential XSS Exploit With User-Supplied Data When Binding Primitive Values\n\nThis vulnerability has been assigned the CVE identifier CVE-2014-0013.\n\nIn general, Ember.js escapes or strips any user-supplied content before\ninserting it in strings that will be sent to innerHTML.  However, we have\nidentified a vulnerability that could lead to unescaped content being inserted\ninto the innerHTML string without being sanitized.\n\nWhen a primitive value is used as the Handlebars context, that value is not\nproperly escaped.  An example of this would be using the `{{each}}` helper to\niterate over an array of user-supplied strings and using `{{this}}` inside the\nblock to display each string.\n\nIn applications that contain templates whose context is a primitive value and\nuse the `{{this}}` keyword to display that value, a specially-crafted payload\ncould execute arbitrary JavaScript in the context of the current domain\n(\"XSS\").\n\nVersions Affected: ALL versions\nNot affected: NONE\nFixed Versions: 1.0.1, 1.1.3, 1.2.1, 1.3.1, 1.4.0-beta.2",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/2kpXXCxISS4"
    ],
    "published": "0001-01-01T00:00:00",
    "updated": "2017-02-22T04:16:47.943Z"
  },
  {
    "pm": "npm",
    "pid": 8401629900,
    "vid": 8397111748,
    "title": "Potential XSS Exploit When Binding `tagName` to User-Supplied Data",
    "description": "Potential XSS Exploit When Binding `tagName` to User-Supplied Data\n\nThis vulnerability has been assigned the CVE identifier CVE-2013-4170.\n\nIn general, Ember.js escapes or strips any user-supplied content\nbefore inserting it in strings that will be sent to innerHTML.\nHowever, the `tagName` property of an `Ember.View` was inserted into\nsuch a string without being sanitized. This means that if an\napplication assigns a view's `tagName` to user-supplied data, a\nspecially-crafted payload could execute arbitrary JavaScript in the\ncontext of the current domain (\"XSS\").\n\nVersions Affected: ALL versions\nNot affected: NONE\nFixed Versions: 1.0.0 RC6.1, 1.0.0 RC5.1, 1.0.0 RC4.1, 1.0.0 RC3.1,\n1.0.0 RC2.1, 1.0.0 RC1.1\n",
    "references": [
      "https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM"
    ],
    "published": "0001-01-01T00:00:00",
    "updated": "2017-02-22T04:16:47.942Z"
  },
  {
    "pm": "npm",
    "pid": 8401629900,
    "vid": 359716,
    "title": "[CVE-2014-0046]  Improper Neutralization of Input During Web Page Generation (\"Cross-site Scripting\")",
    "description": "Cross-site scripting (XSS) vulnerability in the link-to helper in Ember.js 1.2.x before 1.2.2, 1.3.x before 1.3.2, and 1.4.x before 1.4.0-beta.6, when used in non-block form, allows remote attackers to inject arbitrary web script or HTML via the title attribute.",
    "references": [
      "http://cve.mitre.org/cgi-bin/cvename.cgi?name=2014-0046",
      "http://emberjs.com/blog/2014/02/07/ember-security-releases.html",
      "http://secunia.com/advisories/56965",
      "http://www.cvedetails.com/cve-details.php?t=1&cve_id=CVE-2014-0046",
      "http://www.openwall.com/lists/oss-security/2014/02/14/6",
      "http://www.securityfocus.com/bid/65579",
      "http://xforce.iss.net/xforce/xfdb/91242",
      "https://groups.google.com/forum/#!topic/ember-security/1h6FRgr8lXQ",
      "https://groups.google.com/forum/#%21topic/ember-security/1h6FRgr8lXQ"
    ],
    "published": "2014-02-27T15:55:04.907Z",
    "updated": "2017-02-22T04:16:47.941Z"
  },
  {
    "pm": "npm",
    "pid": 7012057027,
    "vid": 8402281308,
    "title": "Cross Site Scripting (XSS) in server rendered templates",
    "description": "> When rendering Angular templates with a server-side templating engine like ERB or Haml it is easy to introduce XSS vulnerabilities. These vulnerabilities are enabled by AngularJS evaluating user-provided strings containing interpolation symbols (default symbols are {{ and }}).\n> \n> -- [github.com](https://github.com/angular/angular.js/issues/5601)\n",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/angular/angular.js/commit/e3f78c17d3b5d3a714402d7314094aabe7f6512a",
      "https://github.com/angular/angular.js/issues/5601",
      "https://github.com/angular/angular.js/issues/7496",
      "https://github.com/angular/angular.js/pull/7517"
    ],
    "published": "2016-12-30T06:31:32.842Z",
    "updated": "2017-02-22T03:58:03.745Z"
  },
  {
    "pm": "npm",
    "pid": 7014036893,
    "vid": 8401420896,
    "title": "Open Redirect vulnerability",
    "description": "> The req.querystring.from parameter is not validated.  It will redirect the user to any url. It is vulnerable to an open redirect.\n> \n> -- [github.com](https://github.com/keystonejs/keystone/pull/242)",
    "references": [
      "https://github.com/keystonejs/keystone/issues/242",
      "https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards"
    ],
    "published": "2016-11-10T15:34:14.31Z",
    "updated": "2017-02-22T03:41:36.382Z"
  },
  {
    "pm": "npm",
    "pid": 8399446280,
    "vid": 8399946978,
    "title": "Cross Site Scripting (XSS)",
    "description": "The gmail.js library dynamically creates functions out of response data and executes them, leading to potential DOM based XSS issues.\n\nAs of last check there is a fix in master, but no subsequent release.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/KartikTalwar/gmail.js/commit/a83436f499f9c01b04280af945a5a81137b6baf1",
      "https://github.com/KartikTalwar/gmail.js/issues/281",
      "https://nodesecurity.io/advisories/125",
      "https://snyk.io/vuln/npm:gmail-js:20160721",
      "https://www.owasp.org/index.php/DOM_Based_XSS"
    ],
    "published": "2016-07-22T21:01:49.996Z",
    "updated": "2017-02-22T03:28:10.421Z"
  },
  {
    "pm": "npm",
    "pid": 7012104410,
    "vid": 8400185164,
    "title": "Cross Site Scripting (XSS) in Todos example",
    "description": "The supplied \"Todos\" example does not escape its data, making it possible to inject and execute JavaScript code.",
    "references": [
      "https://github.com/jashkenas/backbone/issues/1677"
    ],
    "published": "2016-10-17T04:52:53.009Z",
    "updated": "2017-02-22T03:21:00.958Z"
  },
  {
    "pm": "npm",
    "pid": 7012103395,
    "vid": 8400185164,
    "title": "Cross Site Scripting (XSS) in Todos example",
    "description": "The supplied \"Todos\" example does not escape its data, making it possible to inject and execute JavaScript code.",
    "references": [
      "https://github.com/jashkenas/backbone/issues/1677"
    ],
    "published": "2016-10-17T04:52:53.009Z",
    "updated": "2017-02-22T03:21:00.958Z"
  },
  {
    "pm": "npm",
    "pid": 7013729472,
    "vid": 8400185153,
    "title": "Cross Site Scripting (XSS)",
    "description": "The xss() function was not properly sanitizing its inputs. This functionality has been since been removed from the product as it is available from other libraries.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/chriso/node-validator/issues/181"
    ],
    "published": "2016-10-17T04:30:50.373Z",
    "updated": "2017-02-22T03:03:54.576Z"
  },
  {
    "pm": "npm",
    "pid": 7014566124,
    "vid": 8400185148,
    "title": "Default tooltip settings leads to XSS vulnerability",
    "description": "> The default settings for tooltip plugin (html=true) is not safe. If you overlook the option in docs, you don't expect the html will be evaluated. The default setting should be false.\n> \n> -- [github.com](https://github.com/twbs/bootstrap/issues/5132)",
    "references": [
      "https://github.com/twitter/bootstrap/issues/5132"
    ],
    "published": "2016-10-17T04:24:03.831Z",
    "updated": "2017-02-22T02:54:28.133Z"
  },
  {
    "pm": "npm",
    "pid": 7014593392,
    "vid": 8400185055,
    "title": "Denial of Service (DoS) and Cross Site Scripting (XSS)",
    "description": "A DoS vulnerability in the Adobe Flash Player dependency and an XSS vulnerability were reported against this package.",
    "references": [
      "https://github.com/videojs/video-js-swf/issues/12",
      "https://github.com/videojs/video-js-swf/pull/14",
      "https://github.com/videojs/video.js/commit/6d1afd059f3f51512b8d162c7d234001b095a1f5",
      "https://github.com/videojs/video.js/issues/435"
    ],
    "published": "2016-10-17T03:48:42.017Z",
    "updated": "2017-02-22T02:48:16.723Z"
  },
  {
    "pm": "npm",
    "pid": 7014304767,
    "vid": 8400171416,
    "title": "Cross Site Scripting (XSS) in example code",
    "description": "The example programs/widgets in this package have an XSS vulnerability when a file name containing javascript is uploaded.\n\nSteps to reproduce:\n1. rename picture.png to \\<img\\ src\\=\\\"x.gif\\\"\\ onerror\\=\\\"alert(document.cookie)\\\"\\ \\>DSC01265.jpg\n2. using standard method, try to upload file.\n3. You will get alert with cookies.",
    "references": [
      "https://github.com/moxiecode/plupload/issues/1109"
    ],
    "published": "2016-10-05T06:23:38.503Z",
    "updated": "2017-02-20T21:20:03.917Z"
  },
  {
    "pm": "npm",
    "pid": 7014304767,
    "vid": 354170,
    "title": "[CVE-2013-0237]  Improper Neutralization of Input During Web Page Generation (\"Cross-site Scripting\")",
    "description": "Cross-site scripting (XSS) vulnerability in Plupload.as in Moxiecode plupload before 1.5.5, as used in WordPress before 3.5.1 and other products, allows remote attackers to inject arbitrary web script or HTML via the id parameter.",
    "references": [
      "http://codex.wordpress.org/Version_3.5.1",
      "http://cve.mitre.org/cgi-bin/cvename.cgi?name=2013-0237",
      "http://wordpress.org/news/2013/01/wordpress-3-5-1/",
      "http://www.cvedetails.com/cve-details.php?t=1&cve_id=CVE-2013-0237",
      "https://bugzilla.redhat.com/show_bug.cgi?id=904122",
      "https://github.com/moxiecode/plupload/commit/2d746ee9083c184f1234d8fed311e89bdd1b39e5"
    ],
    "published": "2013-07-08T20:55:00.993Z",
    "updated": "2017-02-20T21:14:57.496Z"
  },
  {
    "pm": "npm",
    "pid": 7014304767,
    "vid": 350898,
    "title": "[CVE-2012-2401]  Permissions, Privileges, and Access Controls",
    "description": "Plupload before 1.5.4, as used in wp-includes/js/plupload/ in WordPress before 3.3.2 and other products, enables scripting regardless of the domain from which the SWF content was loaded, which allows remote attackers to bypass the Same Origin Policy via crafted content.",
    "references": [
      "http://core.trac.wordpress.org/browser/branches/3.3/wp-includes/js/plupload/changelog.txt?rev=20487",
      "http://core.trac.wordpress.org/browser/branches/3.3/wp-includes/js/plupload?rev=20487",
      "http://cve.mitre.org/cgi-bin/cvename.cgi?name=2012-2401",
      "http://secunia.com/advisories/49138",
      "http://wordpress.org/news/2012/04/wordpress-3-3-2/",
      "http://www.cvedetails.com/cve-details.php?t=1&cve_id=CVE-2012-2401",
      "http://www.debian.org/security/2012/dsa-2470",
      "http://www.plupload.com/punbb/viewtopic.php?id=1685",
      "https://nealpoole.com/blog/2012/05/xss-and-csrf-via-swf-applets-swfupload-plupload/"
    ],
    "published": "2012-04-21T23:55:01.33Z",
    "updated": "2017-02-20T21:14:38.701Z"
  },
  {
    "pm": "npm",
    "pid": 7014413855,
    "vid": 8400171360,
    "title": "Cross Site Scripting (XSS)",
    "description": "Comments in URI schemes can allow for sanitizer bypass.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/punkave/sanitize-html/issues/15"
    ],
    "published": "2016-10-05T04:13:00.665Z",
    "updated": "2017-02-20T21:02:42.66Z"
  },
  {
    "pm": "npm",
    "pid": 7014413855,
    "vid": 8400171359,
    "title": "Cross Site Scripting (XSS)",
    "description": "With the `a` tag and `href` attribute allowed, it is possible to bypass the sanitizer.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/punkave/sanitize-html/commit/889d4ec968e175f1905b2eb9d33f1fa89217cb02",
      "https://github.com/punkave/sanitize-html/issues/1"
    ],
    "published": "2016-10-05T04:11:53.39Z",
    "updated": "2017-02-20T21:01:09.162Z"
  },
  {
    "pm": "npm",
    "pid": 7014384788,
    "vid": 8400171358,
    "title": "Cross Site Scripting (XSS) in respond-proxy.html",
    "description": "A `javascript:` URI may be used as the url argument for the respond-proxy.html which will be executed by the client's browser.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/scottjehl/Respond/blob/master/cross-domain/respond-proxy.html#L90",
      "https://github.com/scottjehl/Respond/issues/359"
    ],
    "published": "2016-10-05T04:09:20.335Z",
    "updated": "2017-02-20T20:56:09.976Z"
  },
  {
    "pm": "npm",
    "pid": 7014567243,
    "vid": 8400171336,
    "title": "Cross Site Scripting (XSS) in suggestion template.",
    "description": "HTML characters in the display value when using the default template are not properly escaped.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/twitter/typeahead.js/commit/97eb7afe65a9e062254c89fb25f40fdcab4750e0",
      "https://github.com/twitter/typeahead.js/issues/975",
      "https://github.com/twitter/typeahead.js/pull/1182"
    ],
    "published": "2016-10-05T03:28:45.713Z",
    "updated": "2017-02-20T20:28:46.507Z"
  },
  {
    "pm": "npm",
    "pid": 7014567243,
    "vid": 8400171335,
    "title": "Cross Site Scripting (XSS)",
    "description": "A script is executed when given as an option to typeahead.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/twitter/typeahead.js/issues/18",
      "https://github.com/twitter/typeahead.js/pull/25",
      "https://github.com/twitter/typeahead.js/pull/80"
    ],
    "published": "2016-10-05T03:28:10.371Z",
    "updated": "2017-02-20T20:26:39.446Z"
  },
  {
    "pm": "npm",
    "pid": 8402103377,
    "vid": 8400171336,
    "title": "Cross Site Scripting (XSS) in suggestion template.",
    "description": "HTML characters in the display value when using the default template are not properly escaped.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/twitter/typeahead.js/commit/97eb7afe65a9e062254c89fb25f40fdcab4750e0",
      "https://github.com/twitter/typeahead.js/issues/975",
      "https://github.com/twitter/typeahead.js/pull/1182"
    ],
    "published": "2016-10-05T03:28:45.713Z",
    "updated": "2017-02-20T20:28:46.507Z"
  },
  {
    "pm": "npm",
    "pid": 8402103377,
    "vid": 8400171335,
    "title": "Cross Site Scripting (XSS)",
    "description": "A script is executed when given as an option to typeahead.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/twitter/typeahead.js/issues/18",
      "https://github.com/twitter/typeahead.js/pull/25",
      "https://github.com/twitter/typeahead.js/pull/80"
    ],
    "published": "2016-10-05T03:28:10.371Z",
    "updated": "2017-02-20T20:26:39.446Z"
  },
  {
    "pm": "npm",
    "pid": 8399846176,
    "vid": 8400171336,
    "title": "Cross Site Scripting (XSS) in suggestion template.",
    "description": "HTML characters in the display value when using the default template are not properly escaped.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/twitter/typeahead.js/commit/97eb7afe65a9e062254c89fb25f40fdcab4750e0",
      "https://github.com/twitter/typeahead.js/issues/975",
      "https://github.com/twitter/typeahead.js/pull/1182"
    ],
    "published": "2016-10-05T03:28:45.713Z",
    "updated": "2017-02-20T20:28:46.507Z"
  },
  {
    "pm": "npm",
    "pid": 8399846176,
    "vid": 8400171335,
    "title": "Cross Site Scripting (XSS)",
    "description": "A script is executed when given as an option to typeahead.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/twitter/typeahead.js/issues/18",
      "https://github.com/twitter/typeahead.js/pull/25",
      "https://github.com/twitter/typeahead.js/pull/80"
    ],
    "published": "2016-10-05T03:28:10.371Z",
    "updated": "2017-02-20T20:26:39.446Z"
  },
  {
    "pm": "npm",
    "pid": 8399846189,
    "vid": 8400171336,
    "title": "Cross Site Scripting (XSS) in suggestion template.",
    "description": "HTML characters in the display value when using the default template are not properly escaped.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/twitter/typeahead.js/commit/97eb7afe65a9e062254c89fb25f40fdcab4750e0",
      "https://github.com/twitter/typeahead.js/issues/975",
      "https://github.com/twitter/typeahead.js/pull/1182"
    ],
    "published": "2016-10-05T03:28:45.713Z",
    "updated": "2017-02-20T20:28:46.507Z"
  },
  {
    "pm": "npm",
    "pid": 8399846189,
    "vid": 8400171335,
    "title": "Cross Site Scripting (XSS)",
    "description": "A script is executed when given as an option to typeahead.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/twitter/typeahead.js/issues/18",
      "https://github.com/twitter/typeahead.js/pull/25",
      "https://github.com/twitter/typeahead.js/pull/80"
    ],
    "published": "2016-10-05T03:28:10.371Z",
    "updated": "2017-02-20T20:26:39.446Z"
  },
  {
    "pm": "npm",
    "pid": 8399824707,
    "vid": 8400152840,
    "title": "[Dependency] Remote memory disclosure",
    "description": "There is a remote memory disclosure vulnerability in the ws package dependency.",
    "references": [
      "https://github.com/socketio/engine.io/commit/c891dd5446325449999668207cb19db9b7d4bf71",
      "https://github.com/socketio/engine.io/issues/375",
      "https://github.com/socketio/engine.io/pull/374",
      "https://nodesecurity.io/advisories/67"
    ],
    "published": "2016-09-18T06:32:01.199Z",
    "updated": "2017-02-20T20:20:40.82Z"
  },
  {
    "pm": "npm",
    "pid": 7013541287,
    "vid": 8400152840,
    "title": "[Dependency] Remote memory disclosure",
    "description": "There is a remote memory disclosure vulnerability in the ws package dependency.",
    "references": [
      "https://github.com/socketio/engine.io/commit/c891dd5446325449999668207cb19db9b7d4bf71",
      "https://github.com/socketio/engine.io/issues/375",
      "https://github.com/socketio/engine.io/pull/374",
      "https://nodesecurity.io/advisories/67"
    ],
    "published": "2016-09-18T06:32:01.199Z",
    "updated": "2017-02-20T20:20:40.82Z"
  },
  {
    "pm": "npm",
    "pid": 7014106606,
    "vid": 8402397936,
    "title": "Cross Site Scripting (XSS) in data links",
    "description": "Allowing `data:` links opens this package up to an XSS attack.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/chjj/marked/commit/8f9d0b72f5606ed32057049f387161dd41c36ade",
      "https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51",
      "https://github.com/chjj/marked/issues/844",
      "https://github.com/chjj/marked/issues/848",
      "https://snyk.io/vuln/npm:marked:20170112"
    ],
    "published": "2017-02-11T23:35:24.605Z",
    "updated": "2017-02-16T15:33:55.695Z"
  },
  {
    "pm": "npm",
    "pid": 7012072580,
    "vid": 8402397936,
    "title": "Cross Site Scripting (XSS) in data links",
    "description": "Allowing `data:` links opens this package up to an XSS attack.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/chjj/marked/commit/8f9d0b72f5606ed32057049f387161dd41c36ade",
      "https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51",
      "https://github.com/chjj/marked/issues/844",
      "https://github.com/chjj/marked/issues/848",
      "https://snyk.io/vuln/npm:marked:20170112"
    ],
    "published": "2017-02-11T23:35:24.605Z",
    "updated": "2017-02-16T15:33:55.695Z"
  },
  {
    "pm": "npm",
    "pid": 7014106608,
    "vid": 8402397936,
    "title": "Cross Site Scripting (XSS) in data links",
    "description": "Allowing `data:` links opens this package up to an XSS attack.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/chjj/marked/commit/8f9d0b72f5606ed32057049f387161dd41c36ade",
      "https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51",
      "https://github.com/chjj/marked/issues/844",
      "https://github.com/chjj/marked/issues/848",
      "https://snyk.io/vuln/npm:marked:20170112"
    ],
    "published": "2017-02-11T23:35:24.605Z",
    "updated": "2017-02-16T15:33:55.695Z"
  },
  {
    "pm": "npm",
    "pid": 8401821609,
    "vid": 8402397936,
    "title": "Cross Site Scripting (XSS) in data links",
    "description": "Allowing `data:` links opens this package up to an XSS attack.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/chjj/marked/commit/8f9d0b72f5606ed32057049f387161dd41c36ade",
      "https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51",
      "https://github.com/chjj/marked/issues/844",
      "https://github.com/chjj/marked/issues/848",
      "https://snyk.io/vuln/npm:marked:20170112"
    ],
    "published": "2017-02-11T23:35:24.605Z",
    "updated": "2017-02-16T15:33:55.695Z"
  },
  {
    "pm": "npm",
    "pid": 7276759650,
    "vid": 8402397936,
    "title": "Cross Site Scripting (XSS) in data links",
    "description": "Allowing `data:` links opens this package up to an XSS attack.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/chjj/marked/commit/8f9d0b72f5606ed32057049f387161dd41c36ade",
      "https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51",
      "https://github.com/chjj/marked/issues/844",
      "https://github.com/chjj/marked/issues/848",
      "https://snyk.io/vuln/npm:marked:20170112"
    ],
    "published": "2017-02-11T23:35:24.605Z",
    "updated": "2017-02-16T15:33:55.695Z"
  },
  {
    "pm": "npm",
    "pid": 7014106698,
    "vid": 8402397936,
    "title": "Cross Site Scripting (XSS) in data links",
    "description": "Allowing `data:` links opens this package up to an XSS attack.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/chjj/marked/commit/8f9d0b72f5606ed32057049f387161dd41c36ade",
      "https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51",
      "https://github.com/chjj/marked/issues/844",
      "https://github.com/chjj/marked/issues/848",
      "https://snyk.io/vuln/npm:marked:20170112"
    ],
    "published": "2017-02-11T23:35:24.605Z",
    "updated": "2017-02-16T15:33:55.695Z"
  },
  {
    "pm": "npm",
    "pid": 7013697349,
    "vid": 8402397936,
    "title": "Cross Site Scripting (XSS) in data links",
    "description": "Allowing `data:` links opens this package up to an XSS attack.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/chjj/marked/commit/8f9d0b72f5606ed32057049f387161dd41c36ade",
      "https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51",
      "https://github.com/chjj/marked/issues/844",
      "https://github.com/chjj/marked/issues/848",
      "https://snyk.io/vuln/npm:marked:20170112"
    ],
    "published": "2017-02-11T23:35:24.605Z",
    "updated": "2017-02-16T15:33:55.695Z"
  },
  {
    "pm": "npm",
    "pid": 7014106540,
    "vid": 8402397936,
    "title": "Cross Site Scripting (XSS) in data links",
    "description": "Allowing `data:` links opens this package up to an XSS attack.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/chjj/marked/commit/8f9d0b72f5606ed32057049f387161dd41c36ade",
      "https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51",
      "https://github.com/chjj/marked/issues/844",
      "https://github.com/chjj/marked/issues/848",
      "https://snyk.io/vuln/npm:marked:20170112"
    ],
    "published": "2017-02-11T23:35:24.605Z",
    "updated": "2017-02-16T15:33:55.695Z"
  },
  {
    "pm": "npm",
    "pid": 8401822077,
    "vid": 8402397936,
    "title": "Cross Site Scripting (XSS) in data links",
    "description": "Allowing `data:` links opens this package up to an XSS attack.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/chjj/marked/commit/8f9d0b72f5606ed32057049f387161dd41c36ade",
      "https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51",
      "https://github.com/chjj/marked/issues/844",
      "https://github.com/chjj/marked/issues/848",
      "https://snyk.io/vuln/npm:marked:20170112"
    ],
    "published": "2017-02-11T23:35:24.605Z",
    "updated": "2017-02-16T15:33:55.695Z"
  },
  {
    "pm": "npm",
    "pid": 7014106685,
    "vid": 8402397936,
    "title": "Cross Site Scripting (XSS) in data links",
    "description": "Allowing `data:` links opens this package up to an XSS attack.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/chjj/marked/commit/8f9d0b72f5606ed32057049f387161dd41c36ade",
      "https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51",
      "https://github.com/chjj/marked/issues/844",
      "https://github.com/chjj/marked/issues/848",
      "https://snyk.io/vuln/npm:marked:20170112"
    ],
    "published": "2017-02-11T23:35:24.605Z",
    "updated": "2017-02-16T15:33:55.695Z"
  },
  {
    "pm": "npm",
    "pid": 8402077531,
    "vid": 8402397936,
    "title": "Cross Site Scripting (XSS) in data links",
    "description": "Allowing `data:` links opens this package up to an XSS attack.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/chjj/marked/commit/8f9d0b72f5606ed32057049f387161dd41c36ade",
      "https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51",
      "https://github.com/chjj/marked/issues/844",
      "https://github.com/chjj/marked/issues/848",
      "https://snyk.io/vuln/npm:marked:20170112"
    ],
    "published": "2017-02-11T23:35:24.605Z",
    "updated": "2017-02-16T15:33:55.695Z"
  },
  {
    "pm": "npm",
    "pid": 7014106778,
    "vid": 8402397936,
    "title": "Cross Site Scripting (XSS) in data links",
    "description": "Allowing `data:` links opens this package up to an XSS attack.",
    "references": [
      "https://cwe.mitre.org/data/definitions/79.html",
      "https://github.com/chjj/marked/commit/8f9d0b72f5606ed32057049f387161dd41c36ade",
      "https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51",
      "https://github.com/chjj/marked/issues/844",
      "https://github.com/chjj/marked/issues/848",
      "https://snyk.io/vuln/npm:marked:20170112"
    ],
    "published": "2017-02-11T23:35:24.605Z",
    "updated": "2017-02-16T15:33:55.695Z"
  }
]